
package de.dominoinformatics.bugmicrostream.ui;

import java.util.HashSet;
import java.util.Set;

import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.ComponentEvent;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.InitialPageSettings;
import com.vaadin.flow.server.PageConfigurator;

import de.dominoinformatics.bugmicrostream.be.Fahrzeug;
import de.dominoinformatics.bugmicrostream.be.FahrzeugTyp;
import de.dominoinformatics.bugmicrostream.microstream.DBUtils;


@Route("home")
public class MainLayout extends VerticalLayout implements PageConfigurator
{

	public MainLayout()
	{
		super();
		this.initUI();
		
	}
	
	private void printFahrzeuge(final Set<Fahrzeug> fahrzeuge)
	{
		for(final Fahrzeug fahrzeug : fahrzeuge)
		{
			System.out.println(fahrzeug.getFahrzeughalter() + " -> " + fahrzeug.getfTyp().getLabel());

		}
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnSaveFahrzeug}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnSaveFahrzeug_onClick(final ClickEvent<Button> event)
	{
		final Set<Fahrzeug> fahrzeuge = DBUtils.root.getFahrzeuge();
		
		Fahrzeug f = new Fahrzeug("Anton stored", FahrzeugTyp.PKW);
		fahrzeuge.add(f);
		
		f = new Fahrzeug("Luise stored", FahrzeugTyp.LKW);
		fahrzeuge.add(f);
		
		f = new Fahrzeug("Lutz stored", FahrzeugTyp.KRAD);
		fahrzeuge.add(f);
		
		// DBUtils.store(fahrzeuge);
		DBUtils.storageManger.store(fahrzeuge);
		System.out.println("-> Fahrzeuge in Microstream gespeichert");
		
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #btnDontSaveFahrzeug}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnDontSaveFahrzeug_onClick(final ClickEvent<Button> event)
	{
		final Set<Fahrzeug> fahrzeuge = new HashSet<>();
		Fahrzeug            f         = new Fahrzeug("Martin", FahrzeugTyp.PKW);
		fahrzeuge.add(f);
		
		f = new Fahrzeug("Heike", FahrzeugTyp.LKW);
		fahrzeuge.add(f);
		
		f = new Fahrzeug("Fritz", FahrzeugTyp.KRAD);
		fahrzeuge.add(f);
		
		System.out.println("#################Fahrzeuge ohne Speichern in Microstream");
		this.printFahrzeuge(fahrzeuge);
		
	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btnDeleteFahrzeuge}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnDeleteFahrzeuge_onClick(final ClickEvent<Button> event)
	{
		final Set<Fahrzeug> fahrzeuge = DBUtils.root.getFahrzeuge();
		fahrzeuge.clear();
		DBUtils.storageManger.store(fahrzeuge);
		DBUtils.storageManger.storeRoot();
		System.out.println("-> Fahrzeuge in Microstream gelöscht");

	}

	/**
	 * Event handler delegate method for the {@link Button} {@link #btnPrintStoredFahrzeuge}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void btnPrintStoredFahrzeuge_onClick(final ClickEvent<Button> event)
	{
		final Set<Fahrzeug> fahrzeuge = DBUtils.root.getFahrzeuge();
		System.out.println("#################Fahrzeuge, gespeichert in Microstream");
		this.printFahrzeuge(fahrzeuge);

	}

	@Override
	public void configurePage(final InitialPageSettings settings)
	{
		settings.addLink("shortcut icon", "frontend/images/favicon.ico");
		settings.addFavIcon("icon", "frontend/images/favicon256.png", "256x256");
	}
	
	/**
	 * Event handler delegate method for the {@link Button} {@link #button}.
	 *
	 * @see ComponentEventListener#onComponentEvent(ComponentEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void button_onClick(final ClickEvent<Button> event)
	{
		DBUtils.storageManger.shutdown();
		
	}
	
	/* WARNING: Do NOT edit!<br>The content of this method is always regenerated by the UI designer. */
	// <generated-code name="initUI">
	private void initUI()
	{
		this.horizontalLayout        = new HorizontalLayout();
		this.btnSaveFahrzeug         = new Button();
		this.btnDeleteFahrzeuge      = new Button();
		this.btnPrintStoredFahrzeuge = new Button();
		this.btnDontSaveFahrzeug     = new Button();
		this.button                  = new Button();
		
		this.btnSaveFahrzeug.setText("Fahrzeuge neu erstellen und in Microstream speichern");
		this.btnDeleteFahrzeuge.setText("Fahrzeuge in Microstream löschen");
		this.btnPrintStoredFahrzeuge.setText("In Microstream gespeicherte Fahrzeuge ausgeben");
		this.btnDontSaveFahrzeug.setText("Fahrzeuge neu erstellen und ausgeben");
		this.button.setText("Microstream stoppen");
		
		this.btnSaveFahrzeug.setSizeUndefined();
		this.btnDeleteFahrzeuge.setSizeUndefined();
		this.horizontalLayout.add(this.btnSaveFahrzeug, this.btnDeleteFahrzeuge);
		this.horizontalLayout.setWidthFull();
		this.horizontalLayout.setHeight(null);
		this.btnPrintStoredFahrzeuge.setSizeUndefined();
		this.btnDontSaveFahrzeug.setSizeUndefined();
		this.button.setSizeUndefined();
		this.add(this.horizontalLayout, this.btnPrintStoredFahrzeuge, this.btnDontSaveFahrzeug, this.button);
		this.setSizeFull();
		
		this.btnSaveFahrzeug.addClickListener(this::btnSaveFahrzeug_onClick);
		this.btnDeleteFahrzeuge.addClickListener(this::btnDeleteFahrzeuge_onClick);
		this.btnPrintStoredFahrzeuge.addClickListener(this::btnPrintStoredFahrzeuge_onClick);
		this.btnDontSaveFahrzeug.addClickListener(this::btnDontSaveFahrzeug_onClick);
		this.button.addClickListener(this::button_onClick);
	} // </generated-code>
	
	// <generated-code name="variables">
	private Button           btnSaveFahrzeug, btnDeleteFahrzeuge, btnPrintStoredFahrzeuge, btnDontSaveFahrzeug, button;
	private HorizontalLayout horizontalLayout;
	// </generated-code>
	
}
